# Code which explores the NBA shot log data
# clear workspace
remove(list = ls())
# clear console
cat("\014")
# load packages
library(caret)
library(tidyverse)
library(skimr)
library(ggplot2)
library(tictoc)
library(corrplot)
library(pROC)
path_project <- "C:/Users/Mats Ole/Desktop/predicting_nba_shots/"
path_rel_data <- "data_input/"
name_data <- "shot_logs.csv"
df_raw <- read_csv(paste0(path_project, path_rel_data, name_data))
df_clean <- df_raw %>%
transmute(game_id = as.factor(GAME_ID),
matchup = as.factor(MATCHUP),
home_game = case_when(LOCATION == "H" ~ TRUE,
LOCATION == "A" ~ FALSE),
win = case_when(W == "W" ~ TRUE,
W == "L" ~ FALSE),
final_margin = abs(FINAL_MARGIN),
shot_number = SHOT_NUMBER,
period = PERIOD,
game_clock = as.numeric(GAME_CLOCK),
shot_clock = SHOT_CLOCK,
dribbles = DRIBBLES,
touch_time = TOUCH_TIME,
shot_dist = SHOT_DIST,
pts_type = as.factor(PTS_TYPE),
shot_result = as.factor(SHOT_RESULT),
closest_defender = as.factor(CLOSEST_DEFENDER),
closest_defender_id = CLOSEST_DEFENDER_PLAYER_ID,
closest_defender_dist = CLOSE_DEF_DIST,
pts = PTS,
player_name = as.factor(player_name),
player_id = player_id) %>%
drop_na() %>% # Here we're dropping about 6k or 0.4% of the observations.
select(shot_result, everything())
kable(skim(df_clean))
mean(df_clean$shot_result == "made")
correlations <- cor(df_clean %>% select_if(is.numeric))
corrplot(correlations, order = "hclust")
ggplot(df_clean[1:10000,], aes(x = shot_dist,
y = closest_defender_dist,
color = shot_result)) +
geom_point(alpha = 1/5)
# stratified random split of the data
df <- df_clean # only look at part of the data for exploratory analysis
in_training <- createDataPartition(y = df$shot_result, p = 0.2, list = FALSE)
df_train <- df[in_training, ]
df_test <- df[-in_training,]
# set up
fitted_models <- list()
model_predictions <- list()
fit_control <- trainControl(method = "cv",
number = 10,
classProbs = TRUE,
summaryFunction = twoClassSummary)
pre_proc_options <- c("center", "scale")
optimisation_metric <- "ROC"
grids <- list()
model_specs <- list()
model_specs$rf <- shot_result ~ shot_dist + pts_type +
closest_defender_dist +
shot_clock +
final_margin +
touch_time +
dribbles +
home_game
tic()
set.seed(111)
fitted_models[["rf"]] <- train(model_specs$rf, data = df_train,
method = "ranger",
metric = optimisation_metric,
preProc = pre_proc_options,
trControl = fit_control
)
model_predictions[["rf"]] <- predict.train(fitted_models[["rf"]], df_test)
toc()
plot(fitted_models[["rf"]])
